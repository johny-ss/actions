name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel current job when pushing new commit into the PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# PLAYWRIGHT_BROWSERS_PATH=0

jobs:
  e2e:
    # timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # keep running other jobs if one fails
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        browser: [chromium, firefox]
        include:
          - os: macos-latest
            browser: "webkit"
    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # installing dependencies with cache
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      # installing browsers with cache
      - name: Store Playwright's Version
        shell: bash #necessary for it to work on Windows, which uses powershell by default
        run: echo "PLAYWRIGHT_VERSION=$(node -p 'require("@playwright/test/package.json").version')" >> $GITHUB_OUTPUT
        id: playwright-version
      # - name: Set Path for Browser Binaries
        # shell: bash #powershell (windows) uses '\' instead of '/' for paths
        # Alternatively, `PLAYWRIGHT_BROWSERS_PATH=0` install binaries in node_modules
        # run: echo "PLAYWRIGHT_BROWSERS_PATH=${{ github.workspace }}/ms-playwright" >> $GITHUB_ENV
      - name: Cache browsers
        id: cache-browsers
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.PLAYWRIGHT_VERSION }}
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
      - name: Download browsers
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # running tests
      - run: npx playwright test --browser=${{ matrix.browser }}
      - name: Upload Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.browser }}-${{ matrix.os }}-test-results
          path: test-results/
          retention-days: 7

  e2e-macOS-webkit:
    # timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # keep running other jobs if one fails
      matrix:
        os: [macos-latest]
        browser: ["webkit"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # installing dependencies with cache
      - name: Install dependencies
        run: npm ci
      
      - name: Set Path for Browser Binaries
        shell: bash #powershell (windows) uses '\' instead of '/' for paths
        run: |
          echo "PLAYWRIGHT_BROWSERS_PATH=${{ github.workspace }}/ms-playwright" >> $GITHUB_ENV

      - name: Download browsers
        # if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps ${{ matrix.browser }}
      - run: npx playwright test --browser=${{ matrix.browser }}
    
  e2e-mac:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        node-version: [16.15.1]
        browser: ['webkit']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - name: Download browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      - run: npx playwright test --browser=${{ matrix.browser }}



  #       projects: [
  #   { name: "chromium", use: { ...devices["Desktop Chrome"] } },
  #   { name: "firefox", use: { ...devices["Desktop Firefox"] } },
  #   { name: "webkit", use: { ...devices["Desktop Safari"] } },
  #   { name: "Mobile Chrome", use: { ...devices["Pixel 5"] } },
  #   { name: "Mobile Safari", use: { ...devices["iPhone SE"] } },
  # ],

